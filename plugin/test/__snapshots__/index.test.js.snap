// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`unknown plugin 1. unknown plugin: 1. unknown plugin 1`] = `

function withDefaults(a, b, c = 1, d = 2, e = 3) {
  return [a, b, c, d, e];
}

      ↓ ↓ ↓ ↓ ↓ ↓

function withDefaults(a, b, c = 1, d = 2, e = 3) {
  let __$curriedResponse = function (a) {
    return function (b, c = 1, d = 2, e = 3) {
      let __$curriedResponse = function (b) {
        return function (c = 1, d = 2, e = 3) {
          let __$curriedResponse = function (c = 1) {
            return function (d = 2, e = 3) {
              let __$curriedResponse = function (d = 2) {
                return function (e = 3) {
                  return [a, b, c, d, e];
                };
              };

              for (const arg of arguments) {
                __$curriedResponse = __$curriedResponse(arg);
              }

              if (arguments.length === 0)
                __$curriedResponse = __$curriedResponse(undefined);
              return __$curriedResponse;
            };
          };

          for (const arg of arguments) {
            __$curriedResponse = __$curriedResponse(arg);
          }

          if (arguments.length === 0)
            __$curriedResponse = __$curriedResponse(undefined);
          return __$curriedResponse;
        };
      };

      for (const arg of arguments) {
        __$curriedResponse = __$curriedResponse(arg);
      }

      if (arguments.length === 0)
        __$curriedResponse = __$curriedResponse(undefined);
      return __$curriedResponse;
    };
  };

  for (const arg of arguments) {
    __$curriedResponse = __$curriedResponse(arg);
  }

  if (arguments.length === 0)
    __$curriedResponse = __$curriedResponse(undefined);
  return __$curriedResponse;
}


`;

exports[`unknown plugin 2. unknown plugin: 2. unknown plugin 1`] = `

function withDefaults(a, b, c = 1, d = 2, e = 3, f, g) {
  return [a, b, c, d, e, f, g];
}

      ↓ ↓ ↓ ↓ ↓ ↓

function withDefaults(a, b, c = 1, d = 2, e = 3, f, g) {
  let __$curriedResponse = function (a) {
    return function (b, c = 1, d = 2, e = 3, f, g) {
      let __$curriedResponse = function (b) {
        return function (c = 1, d = 2, e = 3, f, g) {
          let __$curriedResponse = function (c = 1) {
            return function (d = 2, e = 3, f, g) {
              let __$curriedResponse = function (d = 2) {
                return function (e = 3, f, g) {
                  let __$curriedResponse = function (e = 3) {
                    return function (f, g) {
                      let __$curriedResponse = function (f) {
                        return function (g) {
                          return [a, b, c, d, e, f, g];
                        };
                      };

                      for (const arg of arguments) {
                        __$curriedResponse = __$curriedResponse(arg);
                      }

                      if (arguments.length === 0)
                        __$curriedResponse = __$curriedResponse(undefined);
                      return __$curriedResponse;
                    };
                  };

                  for (const arg of arguments) {
                    __$curriedResponse = __$curriedResponse(arg);
                  }

                  if (arguments.length === 0)
                    __$curriedResponse = __$curriedResponse(undefined);
                  return __$curriedResponse;
                };
              };

              for (const arg of arguments) {
                __$curriedResponse = __$curriedResponse(arg);
              }

              if (arguments.length === 0)
                __$curriedResponse = __$curriedResponse(undefined);
              return __$curriedResponse;
            };
          };

          for (const arg of arguments) {
            __$curriedResponse = __$curriedResponse(arg);
          }

          if (arguments.length === 0)
            __$curriedResponse = __$curriedResponse(undefined);
          return __$curriedResponse;
        };
      };

      for (const arg of arguments) {
        __$curriedResponse = __$curriedResponse(arg);
      }

      if (arguments.length === 0)
        __$curriedResponse = __$curriedResponse(undefined);
      return __$curriedResponse;
    };
  };

  for (const arg of arguments) {
    __$curriedResponse = __$curriedResponse(arg);
  }

  if (arguments.length === 0)
    __$curriedResponse = __$curriedResponse(undefined);
  return __$curriedResponse;
}


`;

exports[`unknown plugin 3. unknown plugin: 3. unknown plugin 1`] = `

const result = (function (a, b, c) {
  return a + b + c;
})(1, 2, 3);

      ↓ ↓ ↓ ↓ ↓ ↓

const result = (function (a, b, c) {
  let __$curriedResponse = function (a) {
    return function (b, c) {
      let __$curriedResponse = function (b) {
        return function (c) {
          return a + b + c;
        };
      };

      for (const arg of arguments) {
        __$curriedResponse = __$curriedResponse(arg);
      }

      if (arguments.length === 0)
        __$curriedResponse = __$curriedResponse(undefined);
      return __$curriedResponse;
    };
  };

  for (const arg of arguments) {
    __$curriedResponse = __$curriedResponse(arg);
  }

  if (arguments.length === 0)
    __$curriedResponse = __$curriedResponse(undefined);
  return __$curriedResponse;
})(1, 2, 3);


`;

exports[`unknown plugin 4. unknown plugin: 4. unknown plugin 1`] = `

const multiplyAll = (a, b, ...rest) => {
  let product = a * b;
  for (const item of rest) {
    product = product * item;
  }
  return product;
};

      ↓ ↓ ↓ ↓ ↓ ↓

const multiplyAll = (a, b, ...rest) => {
  let __$curriedResponse = function (a) {
    return function (b, ...rest) {
      let __$curriedResponse = function (b) {
        return function (...rest) {
          let product = a * b;

          for (const item of rest) {
            product = product * item;
          }

          return product;
        };
      };

      for (const arg of arguments) {
        __$curriedResponse = __$curriedResponse(arg);
      }

      if (arguments.length === 0)
        __$curriedResponse = __$curriedResponse(undefined);
      return __$curriedResponse;
    };
  };

  const args = [];
  if (a !== undefined) args.push(a);
  if (b !== undefined) args.push(b);
  if (undefined !== undefined) args.push(undefined);

  for (const arg of args) {
    __$curriedResponse = __$curriedResponse(arg);
  }

  if (args.length === 0) __$curriedResponse = __$curriedResponse(undefined);
  return __$curriedResponse;
};


`;
